# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type BankAccount {
  id: ID!
  bankName: String!
  moneyAmount: Float!
  expenses: [Expense!]
  incomes: [Income!]
}

input BankAccountInput {
  bankName: String!
  moneyAmount: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Expense {
  id: ID!
  amount: Float!
  description: String!
  date: DateTime
}

type FieldError {
  path: String!
  message: String!
}

type Income {
  id: ID!
  amount: Float!
  description: String!
  date: DateTime
}

type Mutation {
  register(input: AuthInput!): UserResponse!
  login(input: AuthInput!): UserResponse!
  logout: Boolean!
  addBankAccount(data: BankAccountInput!, id: String!): Boolean!
  addExpense(description: String!, amount: Float!, id: String!): Boolean!
  addIncome(description: String!, amount: Float!, id: String!): Boolean!
  updateUser(data: UpdateInput!, id: String!): Boolean!
  deleteUser(id: String!): Boolean!
}

type Query {
  me: User
  expenses(id: String!): [Expense!]!
  incomes(id: String!): [Income!]!
  bankAccount(id: String!): BankAccount!
  bankAccounts(id: String!): [BankAccount!]!
  users: [User!]!
  user(id: String!): User!
}

input UpdateInput {
  email: String!
  password: String!
  name: String!
  cash: Float!
}

type User {
  id: ID!
  email: String!
  name: String
  cash: Float
  budget: Float!
  bankAccounts: [BankAccount!]
}

type UserResponse {
  user: User
  errors: [FieldError!]
}
